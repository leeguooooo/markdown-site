name: Run Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# 并发控制：同一分支只运行最新的测试
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        cache: true

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run TypeScript check
      run: npx tsc --noEmit --skipLibCheck

    - name: Run ESLint
      run: pnpm lint

    - name: Run unit tests
      run: pnpm test:run
      env:
        NODE_ENV: test

    - name: Run tests with coverage
      run: pnpm test:coverage
      env:
        NODE_ENV: test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.node-version == 20
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          tests/data/
        retention-days: 7

  # 数据库集成测试
  database-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        cache: true

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run database-specific tests
      run: pnpm test:run tests/core/database/
      env:
        NODE_ENV: test

    - name: Run API integration tests
      run: pnpm test:run tests/api/
      env:
        NODE_ENV: test

  # 构建测试
  build-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        cache: true

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build application
      run: pnpm build
      env:
        NODE_ENV: production
        SKIP_PREBUILD: true

    - name: Check build output
      run: |
        if [ ! -d ".next" ]; then
          echo "Build failed: .next directory not found"
          exit 1
        fi
        echo "Build successful"

  # 安全检查
  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run security audit
      run: pnpm audit --audit-level moderate

    - name: Check for vulnerabilities
      run: |
        # 检查是否有高危漏洞
        if pnpm audit --audit-level high --json | grep -q '"vulnerabilities"'; then
          echo "High severity vulnerabilities found!"
          pnpm audit --audit-level high
          exit 1
        fi
        echo "No high severity vulnerabilities found"

  # 测试结果汇总
  test-summary:
    runs-on: ubuntu-latest
    needs: [test, database-test, build-test, security-check]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "## 测试结果汇总" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 测试类型 | 状态 |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 单元测试 | ${{ needs.test.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 数据库测试 | ${{ needs.database-test.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 构建测试 | ${{ needs.build-test.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 安全检查 | ${{ needs.security-check.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.database-test.result }}" == "success" && "${{ needs.build-test.result }}" == "success" && "${{ needs.security-check.result }}" == "success" ]]; then
          echo "🎉 所有测试通过！可以安全合并。" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ 部分测试失败，请检查后再合并。" >> $GITHUB_STEP_SUMMARY
        fi
