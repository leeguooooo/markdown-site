name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: misonote-markdown

# 并发控制：同一分支只运行最新的构建
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # 设置 Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    # 设置 pnpm 缓存（推荐方式）
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        cache: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        # 启用更多构建特性
        driver-opts: |
          network=host

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-{{sha}}
          type=ref,event=pr,suffix=-{{sha}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix=commit-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        # PR 只构建 amd64 以节省时间，正式发布构建多架构
        platforms: ${{ github.event_name == 'pull_request' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # 优化缓存策略
        cache-from: |
          type=gha
          type=registry,ref=${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: |
          type=gha,mode=max
          type=registry,ref=${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        # 构建参数优化
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Generate usage documentation
      if: github.event_name != 'pull_request'
      run: |
        cat > DOCKER-USAGE.md << 'EOF'
        # 🐳 Docker 镜像使用说明

        ## 📦 预构建镜像

        我们提供了预构建的 Docker 镜像，支持多种架构：

        - **AMD64** (x86_64) - 适用于大多数服务器和桌面环境
        - **ARM64** (aarch64) - 适用于 Apple Silicon Mac、树莓派等

        ## 🚀 快速开始

        ### 1. 直接运行

        ```bash
        # 使用默认临时密码 (admin123)
        docker run -d -p 3001:3001 --name misonote-markdown ${{ secrets.DOCKER_USERNAME }}/misonote-markdown:latest

        # 启动时设置自定义密码（推荐）
        docker run -d \
          -p 3001:3001 \
          -e ADMIN_PASSWORD=your_secure_password \
          --name misonote-markdown \
          ${{ secrets.DOCKER_USERNAME }}/misonote-markdown:latest

        # 使用特定版本
        docker run -d \
          -p 3001:3001 \
          -e ADMIN_PASSWORD=your_secure_password \
          --name misonote-markdown \
          ${{ secrets.DOCKER_USERNAME }}/misonote-markdown:v1.0.0
        ```

        ### 2. 使用 Docker Compose

        创建 `docker-compose.yml` 文件：

        ```yaml
        services:
          misonote-markdown:
            image: ${{ secrets.DOCKER_USERNAME }}/misonote-markdown:latest
            container_name: misonote-markdown
            ports:
              - "3001:3001"
            volumes:
              - ./docs:/app/docs
              - ./data:/app/data
              - ./logs:/app/logs
            environment:
              - NODE_ENV=production
              # 设置管理员密码（推荐修改）
              - ADMIN_PASSWORD=your_secure_password
            restart: unless-stopped
        ```

        ### 3. 环境变量配置

        | 变量名 | 描述 | 默认值 |
        |--------|------|--------|
        | `NODE_ENV` | 运行环境 | `production` |
        | `PORT` | 服务端口 | `3001` |
        | `ADMIN_PASSWORD` | 管理员密码（明文，启动时自动加密） | `admin123` |
        | `ADMIN_PASSWORD_HASH_BASE64` | 管理员密码哈希 | 自动生成 |
        | `JWT_SECRET` | JWT 密钥 | 自动生成 |
        | `MCP_API_KEY` | MCP 客户端 API 密钥 | 自动生成 |

        ### 4. 健康检查

        ```bash
        curl http://localhost:3001/api/health
        ```

        ## 📋 可用标签

        - `latest` - 最新稳定版本
        - `v1.0.0` - 特定版本
        - `main` - 主分支最新版本

        ## 🔗 链接

        - [Docker Hub](https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/misonote-markdown)
        - [GitHub Repository](https://github.com/${{ github.repository }})
        EOF

    - name: Upload usage documentation
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docker-usage-docs
        path: DOCKER-USAGE.md
